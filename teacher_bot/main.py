import os
from telethon.sync import TelegramClient, functions, events
from telethon import types
from telethon.tl.functions.messages import ExportChatInviteRequest, DeleteChatRequest, EditChatTitleRequest, \
    DeleteHistoryRequest


from models import User, MessageCorrespondence, GroupChat
from enums import Role

api_id = int(os.environ.get('API_ID'))
api_hash = os.environ.get('API_HASH')

client = TelegramClient('anon', api_id, api_hash)


@client.on(events.MessageEdited)
async def handler(massage):
    chat = await massage.get_chat()

    if is_group_chat(chat):
        chat_for_reaction_id, message_for_reaction_id = get_message_for_reaction('teacher', chat.id, massage.id)
    else:
        chat_for_reaction_id, message_for_reaction_id = get_message_for_reaction('student', chat.id, massage.id)
    chat_for_reaction = await client.get_entity(chat_for_reaction_id)

    await client(functions.messages.SendReactionRequest(
        peer=chat_for_reaction,
        msg_id=message_for_reaction_id,
        reaction=[massage.reactions.recent_reactions[0].reaction]
    ))


@client.on(events.NewMessage(incoming=True))
async def handle_message(event):
    sender = await event.get_sender()
    teacher = get_teacher()
    chat = await event.get_chat()
    await client.get_dialogs()
    if sender.bot:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º")
        split_message = event.raw_text.split('|')
        command = split_message[0]
        match command:
            case '—Å–æ–∑–¥–∞—Ç—å_–≥—Ä—É–ø–ø–æ–≤–æ–π_—á–∞—Ç':
                group_name = split_message[1]
                group_chat_id = await create_group_chat(teacher, group_name)
                await event.respond(f'—Å–æ–∑–¥–∞–Ω_–≥—Ä—É–ø–ø–æ–≤–æ–π_—á–∞—Ç|{group_name}|{teacher.id}|{group_chat_id}')

            case '–æ—Ç–ø—Ä–∞–≤—å_—Å—Å—ã–ª–∫—É':
                group_chat_id = split_message[1]
                students_to_send = split_message[2].split(',')
                invite_link = await get_invite_link(int(group_chat_id))
                await client.get_dialogs()
                for student in students_to_send:
                    await client.send_message(int(student), f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É {invite_link}')
                    user = User.select().where(User.id == int(student)).first()
                    await client.send_message(user.group_with_individual_chat_id,
                                              f'<—ç—Ç–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç>')
                await event.respond(f'—Å—Å—ã–ª–∫–∏_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã|{teacher.id}')

            case '—É–¥–∞–ª–∏_—á–∞—Ç':
                group_chat_id = int(split_message[1])
                await delete_group_chat(group_chat_id)
                await event.respond(f'—á–∞—Ç_—É–¥–∞–ª–µ–Ω|{teacher.id}')

            case '–ø–µ—Ä–µ–∏–º–µ–Ω—É–π_–≥—Ä—É–ø–ø–æ–≤–æ–π_—á–∞—Ç':
                group_chat_id = int(split_message[1])
                new_name = split_message[2]
                await rename_group_chat(group_chat_id, new_name)
                await event.respond(f'—á–∞—Ç_–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω|{teacher.id}')

            case '—É–¥–∞–ª–∏_—Å—Ç—É–¥–µ–Ω—Ç–∞':
                student_id = int(split_message[1])
                await delete_student(student_id)
                await event.respond(f'—Å—Ç—É–¥–µ–Ω—Ç_—É–¥–∞–ª–µ–Ω|{teacher.id}')

            case '–ø–µ—Ä–µ–∏–º–µ–Ω—É–π_c—Ç—É–¥–µ–Ω—Ç–∞':
                student_id = int(split_message[1])
                new_student_first_name = split_message[2]
                new_student_last_name = split_message[3]
                await rename_student(student_id, new_student_first_name, new_student_last_name)
                await event.respond(f'—Å—Ç—É–¥–µ–Ω—Ç_–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω|{teacher.id}')


    else:
        if teacher:
            """–ï—Å–ª–∏ –ø–µ–¥–∞–≥–æ–≥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
            if is_teacher_event(sender.id):
                """–ï—Å–ª–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—Å–∞–ª –ø–µ–¥–∞–≥–æ–≥"""
                if is_group_chat(chat):
                    group_chat = GroupChat.select().where(GroupChat.group_clone_id == chat.id).first()
                    if group_chat:
                        """–ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏"""
                        sent_message = await client.send_message(group_chat.id, event.message)
                        create_correspondence(chat.id, event.message.id, group_chat.id, sent_message.id)
                    else:
                        """–ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–∞—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
                        student = User.get(User.group_with_individual_chat_id == chat.id)
                        sent_message = await client.send_message(student.id, event.message)
                        create_correspondence(chat.id, event.message.id, student.id, sent_message.id)
                else:
                    """–ï—Å–ª–∏ –ø–µ–¥–∞–≥–æ–≥ –ø–∏—à–µ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º"""
                    await client.send_message(teacher.id, "—Å–∫–æ—Ä–æ –Ω–∞–ø–∏—à–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–µ–±—è")
            else:
                if is_group_chat(chat):
                    """–ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —Å—Ç—É–¥–µ–Ω—Ç"""
                    group_chat = GroupChat.select().where(GroupChat.id == chat.id).first()
                    if sender.id != group_chat.last_message_user_id:
                        group_chat.last_message_user_id = sender.id
                        group_chat.save()
                        student = User.select().where(User.id == sender.id).first()
                        await client.send_message(group_chat.group_clone_id,
                                                  f'üë§ **{student.first_name} {student.last_name}:**')
                    sent_message = await client.send_message(group_chat.group_clone_id, event.message)
                    create_correspondence(group_chat.group_clone_id, sent_message.id, sender.id, event.message.id)

                else:
                    """–ï—Å–ª–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—Å–∞–ª —Å—Ç—É–¥–µ–Ω—Ç"""
                    student, created = create_or_get_user(teacher.id, sender.id, sender.username, sender.first_name,
                                                          sender.last_name)
                    if created:
                        """–ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ –≤ –±–∞–∑–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
                        await create_group_with_individual_chat(student, teacher)
                    sent_message = await client.send_message(student.group_with_individual_chat_id, event.message)
                    create_correspondence(student.group_with_individual_chat_id, sent_message.id, student.id,
                                          event.message.id)
        else:
            if event.raw_text.lower() == '—è –ø–µ–¥–∞–≥–æ–≥':
                teacher, created = create_or_get_user(sender.id, sender.id, sender.username,
                                                      sender.first_name, sender.last_name, Role.teacher)
                if created:
                    await client.send_message(teacher.id, '–°—É–ø–µ—Ä, —á—Ç–æ –±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ–¥–∞–≥–æ–≥–∞ '
                                                          '–ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ @guitardo_chat_manager_bot –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '
                                                          '—Å—Ç–∞—Ä—Ç.')
                    teacher_bot = await get_teacher_bot()
                    teacher_bot.teacher_id = teacher.id
                    teacher_bot.save()
                    teacher.teacher_bot_id = teacher_bot.id
                    await client.send_message('@guitardo_chat_manager_bot', '/start')


def create_or_get_user(teacher_id, user_id, username, first_name, last_name=None, role=Role.student):
    user, created = User.get_or_create(
        id=user_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'role': role,
            'teacher_id': teacher_id,
        }
    )

    return user, created


def get_teacher():
    return User.select().where(User.role == Role.teacher).first()


async def delete_group_chat(group_chat_id):
    await client(DeleteChatRequest(chat_id=group_chat_id))
    chat = GroupChat.select().where(GroupChat.id == group_chat_id).first()
    clone_chat_id = chat.group_clone_id
    await client(DeleteChatRequest(chat_id=clone_chat_id))


async def delete_student(student_id):
    await client(DeleteHistoryRequest(peer=student_id, max_id=0))
    chat = User.select().where(User.id == student_id).first()
    group_with_individual_chat_id = chat.group_with_individual_chat_id
    await client(DeleteChatRequest(chat_id=group_with_individual_chat_id))


async def rename_group_chat(group_chat_id, new_name):
    await client(EditChatTitleRequest(chat_id=group_chat_id, title=new_name))
    chat = GroupChat.select().where(GroupChat.id == group_chat_id).first()
    chat.name = new_name
    chat.save()
    clone_chat_id = chat.group_clone_id
    await client(EditChatTitleRequest(chat_id=clone_chat_id, title=new_name))


async def rename_student(student_id, new_student_first_name, new_student_last_name):
    student = User.select().where(User.id == student_id).first()
    student.first_name = new_student_first_name
    student.last_name = new_student_last_name
    student.save()
    chat_to_rename = student.group_with_individual_chat_id
    await client(EditChatTitleRequest(chat_id=chat_to_rename,
                                      title=f'{new_student_first_name} {new_student_last_name}'))


def is_teacher_event(user_id):
    user = User.select().where(User.id == user_id).first()
    if user:
        return user.role == Role.teacher
    return False


async def create_group_with_individual_chat(user, teacher):
    group_title = f"{user.first_name} {user.last_name}"
    user_id_list = [teacher.id]
    created_group = await client(functions.messages.CreateChatRequest(
        users=user_id_list,
        title=group_title
    ))
    group_with_individual_chat = created_group.chats[0]
    group_with_individual_chat_id = group_with_individual_chat.id
    user.group_with_individual_chat_id = group_with_individual_chat_id
    user.save()


async def create_group_chat(teacher, group_name):
    await client.get_dialogs()
    group_title = group_name
    user_id_list = []
    created_group = await client(functions.messages.CreateChatRequest(
        users=user_id_list,
        title=group_title
    ))
    user_id_list.append(teacher.id)
    created_group_for_teacher = await client(functions.messages.CreateChatRequest(
        users=user_id_list,
        title=f'{group_title} - –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç'
    ))
    group = created_group.chats[0]
    group_chat_id = group.id
    clone_group = created_group_for_teacher.chats[0]
    clone_group_chat_id = clone_group.id
    GroupChat.create(
        id=group_chat_id,
        group_clone_id=clone_group_chat_id,
        name=group_name,
        teacher=teacher.id,
    )
    return group_chat_id


def is_group_chat(chat):
    return isinstance(chat, types.Chat)


def get_message_for_reaction(user, chat_id, message_id):
    if user == 'teacher':
        message_info = MessageCorrespondence.select().where((MessageCorrespondence.teacher_message_id == message_id) &
                                                            (MessageCorrespondence.teacher_chat_id == chat_id)).first()
        return message_info.student_chat_id, message_info.student_message_id
    else:
        message_info = MessageCorrespondence.select().where((MessageCorrespondence.student_message_id == message_id) &
                                                            (MessageCorrespondence.student_chat_id == chat_id)).first()
        return message_info.teacher_chat_id, message_info.teacher_message_id


def create_correspondence(teacher_chat_id, teacher_message_id, student_chat_id, student_message_id):
    MessageCorrespondence.create(
        teacher_chat_id=teacher_chat_id,
        teacher_message_id=teacher_message_id,
        student_chat_id=student_chat_id,
        student_message_id=student_message_id
    )


async def get_teacher_bot():
    me = await client.get_me()
    teacher = get_teacher()
    teacher_bot, _ = create_or_get_user(teacher.id, me.id, me.username, me.first_name, me.last_name, Role.teacher_bot)
    return teacher_bot


async def main():
    await client.start()
    print('–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω')
    await client.run_until_disconnected()


async def get_invite_link(chat_id):
    invite_link = await client(ExportChatInviteRequest(chat_id))
    return invite_link.link


if __name__ == '__main__':
    client.loop.run_until_complete(main())
